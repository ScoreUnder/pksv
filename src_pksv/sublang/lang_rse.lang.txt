# Pseudo-commands
[] = .text !*text
[] = "=" !*text  # old alias for .text
[] = m !*moves
[] = .move !*moves
[] = item !*items
[] = furniture !*furniture
[] = .braille !braille

# Actual commands
[] = "#raw"+default 1
[0x00] = nop0
[0x01] = nop1
[0x02] = end+end
[0x03] = return+end
[0x04] = call 4:address@*
[0x05] = jump+end 4:address@*
[0x06] = "if jump" 1:condition:dec 4:address@*
[0x07] = "if call" 1:condition:dec 4:address@*
[0x08] = jumpstd 1:*callstd:dec
[0x09] = callstd 1:*callstd:dec
[0x0A] = "if jumpstd" 1:condition:dec 1:*callstd:dec
[0x0B] = "if callstd" 1:condition:dec 1:*callstd:dec
[0x0C] = jumpram+end
[0x0D] = killscript+end
[0x0E] = setbyte 1
[0x0F 0x00] = msgbox 4:address@cmd=".text"
[0x0F] = loadpointer 1 4:address
[0x10] = setbyte2 1 1
[0x11] = writebytetooffset 1 4:address
[0x12] = loadbytefrompointer 1 4:address
[0x13] = setfarbyte 1 4:address
[0x14] = copyscriptbanks 1 1
[0x15] = copybyte 4:address 4:address
[0x16] = setvar 2:*var 2:*var
[0x17] = addvar 2:*var 2:*var
[0x18] = subtractvar 2:*var 2:*var
[0x19] = copyvar 2:*var 2:*var
[0x1A] = copyvarifnotzero 2:*var 2:*var
[0x1A] = setorcopyvar 2:*var 2:*var
[0x1B] = comparelocals+cmp_int 2:*var 2:*var
[0x1C] = comparelocaltobyte+cmp_int 2:*var 1
[0x1D] = comparelocaltofarbyte+cmp_int 2:*var 4:address
[0x1E] = comparefarbytetolocal+cmp_int 4:address 2:*var
[0x1F] = comparefarbytetobyte+cmp_int 4:address 1
[0x20] = comparefarbytetofarbyte+cmp_int 4:address 4:address
[0x21] = compare+cmp_int 2:*var 2
[0x22] = comparevars+cmp_int 2:*var 2:*var
[0x23] = callasm 4:address@gba_arm
[0x24] = callasm2 4:address@gba_arm
[0x24] = jumpasm+end 4:address@gba_arm
[0x25] = special 2:*special
[0x26] = specialvar 2:*var 2:*special
[0x27] = waitspecial
[0x28] = pause 2:dec
[0x29] = setflag 2:*flag
[0x2A] = clearflag 2:*flag
[0x2B] = checkflag+cmp_flag 2:*flag
[0x2C] = initclock 2:*var 2:*var
[0x2D] = dotimebasedevents
[0x2E] = gettime
[0x2F] = sound 2:*sound
[0x30] = waitsound
[0x31] = fanfare 2:*sound
[0x32] = waitfanfare
[0x33] = playsound 2:*sound 1:bool  # sound, save_as_bgm
[0x34] = savebgm 2:*sound
[0x35] = fadedefault
[0x36] = fadesong 2:*sound
[0x37] = fadeout 1:dec  # speed
[0x38] = fadein  1:dec  # speed
[0x39] = warp           1 1 1  # bank, map, exit
[0x3A] = warpmuted      1 1 1  # bank, map, exit
[0x3B] = warpwalking    1 1 1  # bank, map, exit
[0x3C] = falldownhole   1 1    # bank, map
[0x3D] = warpteleport   1 1 1  # bank, map, exit
[0x3E] = setwarp        1 1 1  # bank, map, exit
[0x3F] = setdynamicwarp 1 1 1  # bank, map, exit
[0x40] = setdivewarp    1 1 1  # bank, map, exit
[0x41] = setholewarp    1 1 1  # bank, map, exit
[0x42] = getplayerxy 2:*var 2:*var
[0x43] = countpokemon
[0x44] = additem             2:*var:*item 2:*var:dec
[0x45] = removeitem          2:*var:*item 2:*var:dec
[0x46] = checkitemspace      2:*var:*item 2:*var:dec
[0x47] = checkitem           2:*var:*item 2:*var:dec
[0x48] = checkitemtype       2:*var:*item
[0x49] = giveitemtopc        2:*var:*item 2:*var:dec
[0x4A] = checkiteminpc       2:*var:*item 2:*var:dec
[0x4B] = addfurniture        2:*var:*furniture
[0x4C] = removefurniture     2:*var:*furniture
[0x4D] = checkfurniturespace 2:*var:*furniture
[0x4E] = checkfurniture      2:*var:*furniture
[0x4F] = applymovement   2:*var:*sprite 4:address@cmd=.move
[0x50] = applymovementat 2:*var:*sprite 4:address@cmd=.move 1 1  # sprite, script, bank, map
[0x51] = waitmovement    2:*var:*sprite
[0x52] = waitmovementat  2:*var:*sprite 1 1  # sprite, bank, map
[0x53] = disappear       2:*var:*sprite
[0x54] = disappearat     2:*var:*sprite 1 1  # sprite, bank, map
[0x55] = reappear        2:*var:*sprite
[0x56] = reappearat      2:*var:*sprite 1 1  # sprite, bank, map
[0x57] = movesprite      2:*var:*sprite 2:*var 2:*var  # sprite, x, y
[0x58] = reappearat2     2:*var:*sprite 1 1  # sprite, bank, map
[0x59] = disappearat2    2:*var:*sprite 1 1  # sprite, bank, map
[0x5A] = faceplayer
[0x5B] = spriteface      2:*var:*sprite 1:*direction
[0x5C] = trainerbattle !*trainerbattle
[0x5D] = trainerbattlebegin
[0x5E] = gotopostbattlescript
[0x5F] = gotobeatenscript
[0x60] = checktrainerflag+cmp_flag 2:*var:*trainer
[0x61] = cleartrainerflag          2:*var:*trainer
[0x62] = settrainerflag            2:*var:*trainer
[0x63] = movespriteperm 2:*var:*sprite 2:*var 2:*var  # sprite, x, y
[0x64] = moveoffscreen  2:*var:*sprite
[0x65] = spritebehave   2:*var:*sprite 1:*spritebehave
[0x66] = showmsg
[0x67] = message 4:address@cmd=.text
[0x68] = closemsg
[0x69] = lockall
[0x6A] = lock
[0x6B] = releaseall
[0x6C] = release
[0x6D] = waitbutton
[0x6E] = showyesno          1 1        # x, y
[0x6F] = multichoice        1 1 1 1    # x, y, id, ignoreButton
[0x70] = multichoicedefault 1 1 1 1 1  # x, y, id, defaultChoice, ignoreButton
[0x71] = multichoicegrid    1 1 1 1 1  # x, y, id, cols, ignoreButton
[0x72] = showbox            1 1 1 1    # x, y, x2, y2
[0x73] = hidebox            1 1 1 1    # x, y, x2, y2
[0x74] = drawboxtext        1 1 1 1    # x, y, id, ignoreButton
[0x75] = showpokepic 2:*var:*pokemon 1 1  # poke, x, y
[0x76] = hidepokepic
[0x77] = showcontestwinner 1:bool
[0x78] = braille 4:address@cmd=.braille
[0x79] = addpokemon 2:*var:*pokemon 1:dec 2:*var:*item 4 4 1
[0x79] = givepokemon 2:*var:*pokemon 1:dec 2:*var:*item 4 4 1
[0x7A] = giveegg 2:*var:*pokemon
[0x7B] = setattack 1:dec 1:dec 2:*attack  # party slot, attack slot, attack; note: resets pp
[0x7C] = checkattack 2:*attack
[0x7D] = bufferpokemon 1:dec 2:*var:*pokemon
[0x7E] = bufferfirstpokemon 1:dec
[0x7F] = bufferpokemonnickname 1:dec 2:*var
[0x80] = bufferitem 1:dec 2:*var:*item
[0x81] = bufferfurniture 1:dec 2:*var:*furniture
[0x82] = bufferattack 1:dec 2:*var:*attack
[0x83] = bufferint 1:dec 2:*var
[0x84] = bufferstdstring 1:dec 2:*stdstring
[0x85] = buffertext 1:dec 4:address@cmd=.text
[0x86] = pokemart 4:address@cmd=item
[0x87] = furnituremart 4:address@cmd=furniture
[0x88] = furnituremart2 4:address@cmd=furniture
[0x89] = slotmachine 2:*var:*slotmachine
[0x8A] = setberrytree 1 1 1  # tree ID, berry, growth stage
[0x8B] = choosecontestpokemon
[0x8C] = startcontest
[0x8D] = showcontestresults
[0x8E] = contestlinktransfer
[0x8F] = random 2:*var  # maximum (not inclusive); goes into LASTRESULT
[0x90] = givemoney 4:dec 1:bool   # amount, nop (true = the command does nothing)
[0x91] = takemoney 4:dec 1:bool   # as above
[0x92] = checkmoney 4:dec 1:bool  # as above; stores in LASTRESULT
[0x93] = showmoney   1 1 1:bool   # x, y, nop
[0x94] = hidemoney   1 1          # x, y
[0x95] = updatemoney 1 1 1:bool   # x, y, nop (updates the money display)
[0x96] = checkdiscount 2:*var     # checks if the discount event is active (energy guru, lilycove vending machines); stores in LASTRESULT
[0x97] = fadescreen 1:*fadescreen
[0x98] = fadescreendelay 1:*fadescreen 1:dec
[0x99] = setcavevisibility 2:*var     # sets the cave visibility (0 to 4) for use with flash
[0x9A] = animatecavevisibility 1:dec  # animates flash level changing (1 to 4)
[0x9B] = messageautoscroll 4:address@cmd=.text
[0x9C] = doanimation 2:*var:*animation
[0x9D] = setanimationvar 1 2:*var     # sets a numbered parameter to pass to the next animation
[0x9E] = waitanimation 2:*var:*animation
[0x9F] = setspawnpoint 2:*var:*spawnpoint  # sets your spawn point. there is a list of them hardcoded in rom somewhere.
[0xA0] = checkgender
[0xA1] = cry 2:*var:*pokemon 2:*var  # pokemon, mode (0-5) (tweaks the sound of the cry)
[0xA2] = setmaptile 2:*var 2:*var 2:*var 2:*var:bool  # x, y, tile ID, solid
[0xA3] = resetweather
[0xA4] = setweather 2:*var:*weather
[0xA5] = doweather
[0xA6] = setstepcallback 1:*stepcallback
[0xA7] = setmaplayoutindex 2:*var
[0xA8] = setspritepriority   2:*var:*sprite 1 1 1  # sprite, map bank, map, priority
[0xA9] = resetspritepriority 2:*var:*sprite 1 1    # sprite, map bank, map
[0xAA] = createtempsprite    1 1 2:*var 2:*var 1 1:*direction  # graphic, sprite, x, y, z, facing
[0xAB] = settempspritefacing 1 1:*direction  # sprite, facing
[0xAC] = opendoor      2:*var 2:*var  # x, y
[0xAD] = closedoor     2:*var 2:*var  # x, y
[0xAE] = waitdoor
[0xAF] = setdooropen   2:*var 2:*var  # x, y
[0xB0] = setdoorclosed 2:*var 2:*var  # x, y
[0xB1] = addelevatorbutton 1 2:*var 2:*var 2:*var  # ? ? ? ?
[0xB2] = showelevatormenu
[0xB3] = coincasetovar    2:*var
[0xB4] = givetocoincase   2:*var
[0xB5] = takefromcoincase 2:*var
[0xB6] = setwildbattle 2:*pokemon 1:dec 2:*item  # pokemon, level, held item
[0xB7] = dowildbattle

# Seems to be for position-independent code.
# Use `setvaddress` with a label pointing to the start of that instruction,
# and it will adjust the offset of all later instructions by that much.
# Also, could be used for script obfuscation if you're feeling evil.
[0xB8] = setvaddress 4:address
[0xB9] = vjump+end   4:address@*
[0xBA] = vcall       4:address@*
[0xBB] = "if vjump"+end 1:*condition:dec 4:address@*
[0xBC] = "if vcall"     1:*condition:dec 4:address@*
[0xBD] = vmessage 4:address@cmd=.text
[0xBE] = vloadptr 4:address@cmd=.text
[0xBF] = vbufferstring 1:dec 4:address@cmd=.text


[0xC0] = showcoincase   1 1  # x, y
[0xC1] = hidecoincase   1 1  # x, y
[0xC2] = updatecoincase 1 1  # x, y
[0xC3] = incrementgamestat 1
[0xC4] = setescapewarp 1 1 1 2:*var 2:*var  # bank, map, warp, x, y
[0xC5] = waitcry
